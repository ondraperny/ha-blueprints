blueprint:
  name: Smart Light Control with Motion and Toggle-Aware Manual Triggers
  description: Turn on/off a light based on multiple triggers with smart toggle behavior. Manual triggers will toggle the light state, motion sensors always turn on.
  domain: automation
  source_url: https://github.com/home-assistant/core/blob/dev/homeassistant/components/automation/blueprints/motion_light.yaml
  author: Home Assistant (Enhanced)
  input:
    all_triggers:
      name: Light Triggers (Required)
      description: |
        Add all triggers that should control the light. You must add at least one trigger.
        - Motion sensors will always turn the light ON
        - Manual triggers (buttons, switches) will TOGGLE the light ON/OFF
        Click "ADD TRIGGER" to add each trigger.
      selector:
        trigger:
    
    motion_entity_for_wait:
      name: Motion Sensor for Wait Timer
      description: The motion sensor that controls the wait timer (should be the same as your motion trigger above)
      selector:
        entity:
          filter:
            - device_class: occupancy
              domain: binary_sensor
            - device_class: motion
              domain: binary_sensor
    
    light_target:
      name: Light
      selector:
        target:
          entity:
            - domain: light
    
    no_motion_wait:
      name: Wait time
      description: Time to leave the light on after the motion sensor reports no motion.
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
    
    target_brightness:
      name: Target Brightness
      description: Brightness level when turning on (0-100%)
      default: 100
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    
    ramp_up_time:
      name: Brightness Ramp Up Time
      description: Time to gradually increase brightness when turning on (0 to disable)
      default: 2
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: seconds
    
    ramp_down_time:
      name: Brightness Ramp Down Time  
      description: Time to gradually decrease brightness when turning off (0 to disable)
      default: 3
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: seconds
    
    min_brightness:
      name: Minimum Brightness for Ramping
      description: Starting/ending brightness level for ramp transitions (1-10%)
      default: 1
      selector:
        number:
          min: 1
          max: 10
          unit_of_measurement: "%"
    
    motion_triggers_always_on:
      name: Motion Always Turns On
      description: If enabled, motion sensors always turn lights ON. If disabled, motion sensors also toggle.
      default: true
      selector:
        boolean:

# If motion is detected or manual trigger activated within the delay,
# we restart the script.
mode: restart
max_exceeded: silent

variables:
  min_brightness_var: !input min_brightness
  target_brightness_var: !input target_brightness
  ramp_up_time_var: !input ramp_up_time
  ramp_down_time_var: !input ramp_down_time
  motion_sensor: !input motion_entity_for_wait
  motion_always_on: !input motion_triggers_always_on
  light_entity: !input light_target

triggers: !input all_triggers

conditions: []

actions:
  - choose:
      # If this is a motion trigger AND motion_always_on is true, always turn on
      - conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ motion_always_on == true }}"
              - condition: template
                value_template: >-
                  {{ trigger.entity_id is defined and 
                     trigger.entity_id == motion_sensor and
                     trigger.to_state is defined and
                     trigger.to_state.state == 'on' }}
        sequence:
          # Motion detected - always turn on
          - alias: "Turn on from motion"
            choose:
              # Ramp up if time is greater than 0
              - conditions:
                  - condition: template
                    value_template: "{{ ramp_up_time_var > 0 }}"
                sequence:
                  - action: light.turn_on
                    target: !input light_target
                    data:
                      brightness_pct: "{{ min_brightness_var }}"
                  - delay:
                      milliseconds: 100
                  - action: light.turn_on
                    target: !input light_target
                    data:
                      brightness_pct: "{{ target_brightness_var }}"
                      transition: "{{ ramp_up_time_var }}"
              - conditions: []
                sequence:
                  - action: light.turn_on
                    target: !input light_target
                    data:
                      brightness_pct: "{{ target_brightness_var }}"
          
          # Wait for motion to stop
          - alias: "Wait until there is no motion from device"
            wait_for_trigger:
              trigger: state
              entity_id: !input motion_entity_for_wait
              from: "on"
              to: "off"
          
          # Wait the configured time
          - alias: "Wait the number of seconds that has been set"
            delay: !input no_motion_wait
          
          # Turn off with ramping
          - alias: "Turn off after motion timeout"
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ ramp_down_time_var > 0 }}"
                sequence:
                  - action: light.turn_on
                    target: !input light_target
                    data:
                      brightness_pct: "{{ min_brightness_var }}"
                      transition: "{{ ramp_down_time_var }}"
                  - delay:
                      seconds: "{{ ramp_down_time_var + 0.5 }}"
                  - action: light.turn_off
                    target: !input light_target
              - conditions: []
                sequence:
                  - action: light.turn_off
                    target: !input light_target
      
      # For all other triggers (or motion with toggle mode), check light state and toggle
      - conditions: []
        sequence:
          - choose:
              # Light is currently OFF - turn it ON
              - conditions:
                  - condition: state
                    entity_id: !input light_target
                    state: "off"
                sequence:
                  - alias: "Toggle - Turn on"
                    choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ ramp_up_time_var > 0 }}"
                        sequence:
                          - action: light.turn_on
                            target: !input light_target
                            data:
                              brightness_pct: "{{ min_brightness_var }}"
                          - delay:
                              milliseconds: 100
                          - action: light.turn_on
                            target: !input light_target
                            data:
                              brightness_pct: "{{ target_brightness_var }}"
                              transition: "{{ ramp_up_time_var }}"
                      - conditions: []
                        sequence:
                          - action: light.turn_on
                            target: !input light_target
                            data:
                              brightness_pct: "{{ target_brightness_var }}"
                  
                  # Only wait for motion if this was triggered by motion sensor
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: >-
                              {{ trigger.entity_id is defined and 
                                 trigger.entity_id == motion_sensor }}
                        sequence:
                          - alias: "Wait until there is no motion from device"
                            wait_for_trigger:
                              trigger: state
                              entity_id: !input motion_entity_for_wait
                              from: "on"
                              to: "off"
                          - alias: "Wait the number of seconds that has been set"
                            delay: !input no_motion_wait
                          - alias: "Turn off after timeout"
                            choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ ramp_down_time_var > 0 }}"
                                sequence:
                                  - action: light.turn_on
                                    target: !input light_target
                                    data:
                                      brightness_pct: "{{ min_brightness_var }}"
                                      transition: "{{ ramp_down_time_var }}"
                                  - delay:
                                      seconds: "{{ ramp_down_time_var + 0.5 }}"
                                  - action: light.turn_off
                                    target: !input light_target
                              - conditions: []
                                sequence:
                                  - action: light.turn_off
                                    target: !input light_target
                      # For manual triggers, also start the motion-based timer if motion is currently detected
                      - conditions:
                          - condition: state
                            entity_id: !input motion_entity_for_wait
                            state: "on"
                        sequence:
                          - alias: "Wait until there is no motion from device"
                            wait_for_trigger:
                              trigger: state
                              entity_id: !input motion_entity_for_wait
                              from: "on"
                              to: "off"
                          - alias: "Wait the number of seconds that has been set"
                            delay: !input no_motion_wait
                          - alias: "Turn off after timeout"
                            choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ ramp_down_time_var > 0 }}"
                                sequence:
                                  - action: light.turn_on
                                    target: !input light_target
                                    data:
                                      brightness_pct: "{{ min_brightness_var }}"
                                      transition: "{{ ramp_down_time_var }}"
                                  - delay:
                                      seconds: "{{ ramp_down_time_var + 0.5 }}"
                                  - action: light.turn_off
                                    target: !input light_target
                              - conditions: []
                                sequence:
                                  - action: light.turn_off
                                    target: !input light_target
              
              # Light is currently ON - turn it OFF immediately
              - conditions:
                  - condition: state
                    entity_id: !input light_target
                    state: "on"
                sequence:
                  - alias: "Toggle - Turn off"
                    choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ ramp_down_time_var > 0 }}"
                        sequence:
                          - action: light.turn_on
                            target: !input light_target
                            data:
                              brightness_pct: "{{ min_brightness_var }}"
                              transition: "{{ ramp_down_time_var }}"
                          - delay:
                              seconds: "{{ ramp_down_time_var + 0.5 }}"
                          - action: light.turn_off
                            target: !input light_target
                      - conditions: []
                        sequence:
                          - action: light.turn_off
                            target: !input light_target
